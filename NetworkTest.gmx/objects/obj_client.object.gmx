<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//connect to the server 
sprites = 0 ; 
connectedClients = 0 ; 
spectatores = 0 ; 
players=   0 ; 
spritesList =  ds_list_create() ; 

serverType = " "  
showJoinMenu = true ; 

isPlaying = false ; 

randomize() ; 
ID = round(random(546416)) ; 




buffer =buffer_create(163840,buffer_grow,1) ; 

socket = network_create_socket(network_socket_tcp) ; 
global.socket = socket ; 



connect = network_connect(socket,global.ipToConnect,global.portToConnect) ; 

if(connect != 0)
{
    connect2 = network_connect(socket,global.localipToConnect,global.portToConnect) ; 
    
    if(connect2 !=0)
    {
        show_message("Can not Connect To Server ! please try again") ; 
        buffer_delete(buffer) ; 
        ds_list_destroy(spritesList) ; 
        network_destroy(socket) ; 
        game_restart() ; 
    }
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//send the keys to the server 

if(isPlaying)
{
    if(keyboard_check_pressed(vk_right))
    {
        scr_send_key(vk_right,0) ; 
    }
    
    if(keyboard_check_released(vk_right))
    {
        scr_send_key(vk_right,1) ; 
    }
    
    if(keyboard_check_pressed(vk_left))
    {
        scr_send_key(vk_left,0) ; 
    }
    
    if(keyboard_check_released(vk_left))
    {
        scr_send_key(vk_left,1) ; 
    }
    
    if(keyboard_check_pressed(vk_up))
    {
        scr_send_key(vk_up,0) ; 
    }
    
    if(keyboard_check_released(vk_up))
    {
        scr_send_key(vk_up,1) ; 
    }
    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var eventid = ds_map_find_value(async_load,"id") ; 

if(socket == eventid)
{
    var buff = ds_map_find_value(async_load,"buffer") ; 
    
    sprites = buffer_read(buff,buffer_u8) ; 
    players = buffer_read(buff,buffer_u8) ; 
    connectedClients = buffer_read(buff,buffer_u8) ; 
    spectatores = buffer_read(buff,buffer_u8) ; 
    
    serverType = buffer_read(buff,buffer_string) ; 
    
    ds_list_clear(spritesList) ; 
    for(var i = 0 ; i &lt; sprites ; i++)
    {
        ds_list_add(spritesList,buffer_read(buff,buffer_u32)) ; 
        ds_list_add(spritesList,buffer_read(buff,buffer_u32)) ; 
        ds_list_add(spritesList,buffer_read(buff,buffer_u16)) ; 
        ds_list_add(spritesList,buffer_read(buff,buffer_u8)) ; 
        ds_list_add(spritesList,buffer_read(buff,buffer_s8)) ; 
        ds_list_add(spritesList,buffer_read(buff,buffer_string)) ; 
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(socket) ; 
buffer_delete(buffer) ; 
ds_list_destroy(spritesList) ; 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the networking objects

var index = 0 ; 

for(var i = 0 ; i &lt; sprites ; i++)
{
    var xx ,yy , sp , in , sc , na ; 
    
    xx = ds_list_find_value(spritesList,index++) ; 
    yy = ds_list_find_value(spritesList,index++) ; 
    sp = ds_list_find_value(spritesList,index++) ; 
    in = ds_list_find_value(spritesList,index++) ; 
    sc = ds_list_find_value(spritesList,index++) ; 
    na = ds_list_find_value(spritesList,index++) ; 
    if(sprite_exists(sp))
    {
        draw_sprite_ext(sp,in,xx,yy,sc,1,0,c_white,1) ; 
        draw_set_halign(fa_center) ; 
        draw_text(xx,yy-75,na); 
        draw_set_halign(fa_left) ; 
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the join menu

if(showJoinMenu)
{
    draw_set_color(c_black) ; 
    draw_set_alpha(0.75) ; 
    draw_rectangle(0,0,room_width,room_height,false) ; 
    draw_set_alpha(1) ; 
    draw_set_color(c_yellow) ;
    var spawn = "Spawn" ; 
    var spectate = "Spectate" ; 
    draw_set_halign(fa_left) ; 
    draw_text(0,32,"Connected Clients :"+string(connectedClients)) ; 
    draw_text(0,64,"Players (max 2) :"+string(players)) ; 
    draw_text(0,96,"Spectatores (max 2) :"+string(spectatores)) ; 
    draw_set_halign(fa_center) ; 
    draw_text(room_width/2,0,"Type : "+serverType) ; 
    
    
    
    
    if(serverType == "1vs1")
    {
        //draw the spawn button 
        
        draw_set_color(c_lime) ; 
        draw_text(room_width/4,room_height/2+10,spawn) ; 
        draw_rectangle(room_width/4-room_width/8,room_height/2,room_width/4+room_width/8,room_height/2+32,true) ;    
        if(mouse_x &gt; room_width/4-room_width/8 &amp;&amp; mouse_x &lt; room_width/4+room_width/8 &amp;&amp; mouse_y &gt; room_height/2&amp;&amp; mouse_y &lt;room_height/2+32)
        {
            if(mouse_check_button_pressed(mb_left))
            {
                if(players &lt; 2)
                {
                buffer_seek(buffer,buffer_seek_start,0) ; 
                buffer_write(buffer,buffer_u8,SPAWN) ; 
                buffer_write(buffer,buffer_string,global.playername) ; 
                buffer_write(buffer,buffer_string,global.character) ; 
                buffer_write(buffer,buffer_u32,ID) ; 
                isPlaying = true ; 
                network_send_packet(socket,buffer,buffer_tell(buffer)) ; 
                          
                showJoinMenu = false; 
                }
                else
                {
                    show_message("max clients number reached") ; 
                }
            }
        }
        
        //draw the spectate menu
        draw_set_color(c_orange) ; 
        draw_text(room_width-room_width/4,room_height/2+10,spectate) ; 
        draw_rectangle(room_width-room_width/4-room_width/8,room_height/2,room_width-room_width/4+room_width/8,room_height/2+32,true) ;    
        if(mouse_x &gt; room_width-room_width/4-room_width/8 &amp;&amp; mouse_x &lt; room_width-room_width/4+room_width/8 &amp;&amp; mouse_y &gt; room_height/2&amp;&amp; mouse_y &lt;room_height/2+32)
        {
            if(mouse_check_button_pressed(mb_left))
            {                   
                if(spectatores &lt; 2)    
                {
                    showJoinMenu = false; 
                    buffer_seek(buffer,buffer_seek_start,0) ; 
                    buffer_write(buffer,buffer_u8,SPECTATE) ; 
                    network_send_packet(socket,buffer,buffer_tell(buffer)) ; 
                }
                else
                {
                    show_message("max spectatores number reached") ; 
                }
            }
        }
    }
    else
    if(serverType == "2vs2")
    {
    
    }
}
else
{
draw_set_color(c_black) ; 
draw_text(0,32,"Buffer size :"+string(buffer_tell(buffer))) ; 
}


draw_set_color(c_white)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
