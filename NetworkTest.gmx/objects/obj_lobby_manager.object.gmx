<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_global_init() ; 

menu[CREATE] = "Create" ;
menu[JOIN] = "Join" ;
menu[PROFILE] = "Profile" ;

curMenu = menu[PROFILE] ; 

//Craete MEnu
checking = false ; 
pubReq = 1 ; 
portReq = 1 ; 
state = " ";  

//Join Menu
serverdata = " " ;

showedServers = 3 ; 
showedServersStart = 0 ; 
pages = 0 ; 
curPage = 0 ; 

for(i = 0 ; i &lt; MAXSERVERS ; i++)
{
    sn[i] = " " ; 
    st[i] = " " ; 
    sc[i] = 0 ; 
    sm[i] = 2 ; 
    si[i] = "127.0.0.1" ; 
    sli[i] = "127.0.0.1" ; 
    sp[i] = 7000 ; 
    
    for(s = 0 ; s &lt; 8 ; s++)
    {
        dataindex[i,s] = 0 ; 
    }
}

index = 0 ; 
lastindex = 0 ; 

//PROFILE
global.selectedPlayer = noone ; 
switch(global.character)
{
    case "naruto" : 
    global.selectedPlayer = spr_naruto_stance ; 
        break ; 
        
    case "itachi" : 
    global.selectedPlayer = spr_itachi_stance ; 
        break ; 
        
    case "neji" : 
    global.selectedPlayer = spr_neji_stance ; 
        break ; 
        
    case "kakashi" : 
    global.selectedPlayer = spr_kakstance ; 
        break ; 
}

//http resuests 
serverList = http_get("http://master.net46.net/GetServers.php") ; 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Extracting the servers informations from the serverdata

for(i = 0 ; i &lt; index-1 ; i++)
{
    sn[i] = string_copy(serverdata,dataindex[i,0]+1,dataindex[i,1]-dataindex[i,0]-1) ; 
    st[i] = string_copy(serverdata,dataindex[i,1]+1,dataindex[i,2]-dataindex[i,1]-1) ; 
    sc[i] = real(string_copy(serverdata,dataindex[i,2]+1,dataindex[i,3]-dataindex[i,2]-1)) ; 
    sm[i] = real(string_copy(serverdata,dataindex[i,3]+1,dataindex[i,4]-dataindex[i,3]-1)) ; 
    si[i] = string_copy(serverdata,dataindex[i,4]+1,dataindex[i,5]-dataindex[i,4]-1) ; 
    sli[i] = string_copy(serverdata,dataindex[i,5]+1,dataindex[i,6]-dataindex[i,5]-1) ; 
    sp[i] = real(string_copy(serverdata,dataindex[i,6]+1,dataindex[i,7]-dataindex[i,6]-1)) ; 
}

//Diplay the pages number
if (index-1 &gt;= showedServers)
{
    pages =  (index-1-( (index-1) % showedServers ) ) / showedServers +1; 
}
else
{
    pages = 1 ; 
}

//update the character
switch(global.character)
{
    case "naruto" : 
    global.selectedPlayer = spr_naruto_stance ; 
        break ; 
        
    case "itachi" : 
    global.selectedPlayer = spr_itachi_stance ; 
        break ; 
        
    case "neji" : 
    global.selectedPlayer = spr_neji_stance ; 
        break ; 
        
    case "kakashi" : 
    global.selectedPlayer = spr_kakstance ; 
        break ; 
}

//Hide the buttons 

if(instance_exists(obj_name_input))
{
    if(curMenu != menu[PROFILE])
    {
        obj_name_input.visible = false ; 
    }
    else
    {
        obj_name_input.visible = true ;     
    }
}

if(curMenu == menu[CREATE] &amp;&amp; global.isPublic == false)
{
    if(!checking &amp;&amp; keyboard_check_pressed(ord('C')))
    {
    instance_create(0,0,obj_test_server) ; 
    checking = true ;
    pubReq = http_get("http://master.net46.net/GetExtIP.php") ; 
    show_message("sending requets") ; 
         
}
}

if(curMenu != menu[CREATE] )
{
    if(instance_exists(obj_test_server))
    {
        with(obj_test_server)
        instance_destroy() ; 
    }

}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_map_find_value(async_load, "id") == serverList
    {
    if ds_map_find_value(async_load, "status") == 0
       {
            var char , str ; 
            str = ds_map_find_value(async_load, "result");
            
            for(i = 1 ; i &lt;= string_length(str) ; i++)
            {
                char = string_char_at(str,i) ; 
                
                if (char == "-")
                {
                    dataindex[index,lastindex] = i ;                    
                    lastindex +=1 ; 
                    
                    if(lastindex == 8)
                    {
                        lastindex = 0 ; 
                        index +=1 ; 
                    }
                }
                
                if(char == "&lt;")
                {
                    serverdata = string_copy(str,1,i-1) ; 
                }
                
                //serverdata = string_copy(str,0,i) ; 
            }
       }
    else
       {
            serverdata = "null";
       }
    }
    
// Getting the External Ip
if ds_map_find_value(async_load, "id") == pubReq
    {
    if ds_map_find_value(async_load, "status") == 0
       {
            var str ; 
            str = ds_map_find_value(async_load, "result") ; 
            
            var char  ;
            for(p = 1 ; p &lt; string_length(str) ; p++)
            {
                char = string_char_at(str,p)
                
                if(char == "-")
                {
                    global.ip = string_copy(str,1,p-1) ;
                    portReq = http_get("http://tuq.in/tools/port.json?ip="+global.ip+"&amp;port="+string(global.port)) ; 
                    show_message("Getting the ip") ; 
                    break ; 
                }
            }
       }
    else
       {
            global.ip = "127.0.0.1" ; 
            
       }
    }
    
//Checking if the port is forwaded 
if ds_map_find_value(async_load, "id") == portReq
    {
    if ds_map_find_value(async_load, "status") == 0
       {
            var str ; 
            str = ds_map_find_value(async_load, "result") ; 
            
            if(str == "true")
            {
                global.isPublic = true ; 
                checking = false ; 
                show_message("Getting the port") ; 
                state = "You can Create public servers !" ; 
                if(instance_exists(obj_test_server))
                {
                    with(obj_test_server)
                    instance_destroy() ; 
                }
            }
            else
            {
                global.isPublic = false ; 
                checking = false  ; 
                state = "the port is closed" ; 
            }
            
       }
    else
       {
            global.isPublic = false ; 
            checking = false  ;
            state = "Can not check your port please try again" ; 
       }
    }
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the Menu

draw_set_color(c_green) ; 
draw_line(0,96+16,room_width,96+16) ;
draw_line(0,96-16,room_width,96-16) ;

for(l = 1 ; l &lt; 3 ; l++)
{
    draw_line(room_width/3*l,96-16,room_width/3*l,96+16) ; 
}
draw_set_halign(fa_center) ; 
draw_set_valign(fa_center) ; 

for (i = 0 ; i &lt; 3 ; i++)
{
    if (curMenu == menu[i])
    {
        draw_set_color(c_yellow) ; 
    }
    else
    {
        draw_set_color(c_green) ; 
    }
    
    draw_text(room_width/4+room_width/4*i,96,menu[i]) ; 
}


draw_set_halign(fa_left) ; 
draw_set_valign(fa_top) ; 

//Switch MEnu

if (room == rm_multiplayer)
{
    if (mouse_y &gt; 96-16 &amp;&amp; mouse_y &lt; 96+16)
    {
        for(d = 0 ; d &lt; 3 ; d++)
        {
            if (mouse_check_button_pressed(mb_left))
            {
                if (mouse_x &gt; room_width/3*d &amp;&amp; mouse_x &lt; room_width/3*(d+1))
                {
                    curMenu = menu[d] ; 
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the Join Menu
if (curMenu == menu[JOIN])
{
    draw_set_color(c_green); 
    draw_set_halign(fa_left) ;     
    draw_text(0,0,global.ipToConnect) ; 
    draw_text(0,16,global.localipToConnect) ; 
    draw_text(0,32,global.portToConnect) ;
     
    draw_text(0,120,"Sevrer Name : ");
    draw_text(200,120,"Sevrer Type : ");
    draw_text(400,120,"Clients : ");
    
    draw_set_color(c_lime); 
    for(i = showedServersStart ; i &lt; showedServersStart+showedServers ; i++)
    {
    
        var off = i-(showedServersStart)  ; 
        
        draw_text(0,152+32*off,sn[i]) ; 
        draw_text(200,152+32*off,st[i]) ; 
        if(sc[i] == sm[i])
        {
            draw_set_color(c_red);  
        }
        
        
        // make a button to connect 
        
        if (sn[i] != " ")
        {
            draw_text(400,152+32*off,string(sc[i])+"/"+string(sm[i])) ; 
            draw_set_color(c_lime); 
            draw_rectangle(550-10,152+32*off,550+(string_width(" Join ")),152+(32*off)+28,true) ; 
            
            draw_text(550,152+32*off,"Join") ; 
            
            if (mouse_x &gt; 550-10 &amp;&amp; mouse_y &lt; 550+string_width(" Join "))
            {
                if (mouse_y &gt; 152+32*off &amp;&amp; mouse_y &lt; 152+32*off+28)
                {
                    if(mouse_check_button_pressed(mb_left))
                    {
                        global.ipToConnect = si[i] ; 
                        global.localipToConnect = sli[i] ; 
                        global.portToConnect = sp[i] ; 
                    }
                }
            }
            
        }
        
    }
    
    //Draw the Pages 
    draw_set_halign(fa_center) ; 
    draw_text(room_width/2,152+32*showedServers,"You're In Page : "+string(curPage+1)+"#Pages : "+string(pages)) ; 
    draw_set_halign(fa_left) ;     
    // Draw Switch buttons 
    draw_rectangle(0,152+32*showedServers,32,152+32*showedServers+32,true) ; 
    draw_rectangle(room_width-33,152+32*showedServers,room_width-1,152+32*showedServers+32,true) ; 
    draw_text(0,152+32*showedServers+10," &lt; ") ; 
    draw_text(room_width-32,152+32*showedServers+10," &gt; ") ; 
    
    //Switch The Pages 
    
    if (mouse_y &gt; 152+32*showedServers &amp;&amp; mouse_y &lt; 152+32*showedServers+32)
    {
        if(mouse_x &gt; room_width-33 &amp;&amp; mouse_x &lt; room_width)
        {
            if (showedServersStart+showedServers &lt; index)
            {
                if(mouse_check_button_pressed(mb_left)){
                showedServersStart +=showedServers ; 
                curPage ++ ; }
            }
        }
        
        if(mouse_x &gt; 0 &amp;&amp; mouse_x &lt; 32)
        {
            if (showedServersStart &gt;= showedServers)
            {
                if(mouse_check_button_pressed(mb_left)){
                showedServersStart -=showedServers ; 
                curPage -- ; }
            }
        }
    }
    
    //draw the direct connection button 
    
    var text = "Connect Manually" ; 
    draw_text(0,152+32*showedServers+96+10,text) ; 
    draw_rectangle(0,152+32*showedServers+96,string_width(text),152+32*showedServers+32+96,true) ; 
    if(mouse_y &gt;152+32*showedServers+96 &amp;&amp; mouse_y&lt;152+32*showedServers+96+32 )
    {
        if(mouse_x &gt; 0 &amp;&amp; mouse_x &lt;string_width(text))
        {
            if(mouse_check_button_pressed(mb_left))
            {
                global.ipToConnect = get_string("Ip :","127.0.0.1") ; 
                global.portToConnect = get_integer("Port :",7000) ; 
                room_goto(rm_multi_battle) ; 
            }
        }
    }
    
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the Profile Menu

if(curMenu == menu[PROFILE])
{

draw_set_halign(fa_center) ; 
    draw_set_valign(fa_center) ; 
    
    
    draw_set_color(c_white) ; 
    draw_sprite_ext(global.selectedPlayer,0,room_width/2,room_height/2,2,2,0,c_white,1) ; 
    draw_text(room_width/2,room_height/2+32,global.character) ; 
    
    //draw the buttons 
    draw_set_color(c_green) ; 
    draw_rectangle(0,room_height/2,32,room_height/2+32,true) ; 
    draw_rectangle(room_width-33,room_height/2,room_width-1,room_height/2+32,true) ; 
    

    draw_text(16,room_height/2+16,"&lt;") ; 
    draw_text(room_width-16,room_height/2+16,"&gt;") ; 
    
    if(mouse_y &gt; room_height/2 &amp;&amp; mouse_y &lt; room_height/2+32)
    {
        if(mouse_x &gt; 0 &amp;&amp; mouse_x &lt; 32)
        {
            if(mouse_check_button_pressed(mb_left))
            {
                switch(global.character)
                {
                    case "naruto" : 
                        global.character = "kakashi" ; 
                    break ; 
                    
                    case "itachi" : 
                        global.character = "naruto" ; 
                    break ; 
                    
                    case "neji" : 
                        global.character = "itachi" ; 
                    break ; 
                    
                    case "kakashi" : 
                        global.character = "neji" ; 
                    break ; 
                }
            }
        }
        
        if(mouse_x &gt; room_width-33 &amp;&amp; mouse_x &lt; room_width)
        {
            if(mouse_check_button_pressed(mb_left))
            {
                switch(global.character)
                {
                    case "naruto" : 
                        global.character = "itachi" ; 
                    break ; 
                    
                    case "itachi" : 
                        global.character = "neji" ; 
                    break ; 
                    
                    case "neji" : 
                        global.character = "kakashi" ; 
                    break ; 
                    
                    case "kakashi" : 
                        global.character = "naruto" ; 
                    break ; 
                }
            }
        }
        
        if(!instance_exists(obj_name_input))
        {
            instance_create(room_width/2,room_height/2+64,obj_name_input) ; 
        }
    }
    
    
    draw_set_halign(fa_left) ; 
    draw_set_valign(fa_top) ; 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the Create Menu

if(curMenu == menu[CREATE])
{
    var text = "Check Hosting" ; 
    draw_set_color(c_lime)     ; 
    
    if(checking)
    {
        draw_set_color(c_red); 
    }
    else
    {
        draw_set_color(c_lime); 
    }
    
    
    draw_set_halign(fa_center) ; 
    draw_text(room_width/2,128+64,state) ; 
    
    
    var text = "Host Server" ; 
    
    draw_text(room_width/2,room_height-20,text) ; 
    draw_rectangle(room_width/2-string_width(text)/2,room_height-32,room_width/2+string_width(text)/2,room_height-1,true) ; 
    
    if(mouse_x &gt; room_width/2-string_width(text)/2 &amp;&amp; mouse_x &lt; room_width/2+string_width(text)/2&amp;&amp; mouse_y &gt; room_height-32&amp;&amp; mouse_y &lt; room_height)
    {
        if(mouse_check_button_pressed(mb_left))
        {
            instance_create(0,0,obj_server) ; 
            global.localipToConnect = "127.0.0.1" ; 
            global.ipToConnect = "127.0.0.1" ; 
            global.portToConnect = global.port ; 
            room_goto(rm_multi_battle) ; 
        }
    }
    
    draw_set_halign(fa_left) ;
     
    draw_text(0,128,"Press C to check the connection to the master server") ; 
    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
